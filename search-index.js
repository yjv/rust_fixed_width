var searchIndex = {};
searchIndex["rust_fixed_width"] = {"doc":"","items":[[0,"spec","rust_fixed_width","",null,null],[3,"Spec","rust_fixed_width::spec","",null,null],[12,"record_specs","","",0,null],[3,"SpecBuilder","","",null,null],[3,"RecordSpec","","",null,null],[12,"line_ending","","",1,null],[12,"field_specs","","",1,null],[3,"RecordSpecBuilder","","",null,null],[3,"FieldSpec","","",null,null],[12,"length","","",2,null],[12,"padding_direction","","",2,null],[12,"padding","","",2,null],[12,"default","","",2,null],[12,"filler","","",2,null],[3,"FieldSpecBuilder","","",null,null],[4,"PaddingDirection","","",null,null],[13,"Left","","",3,null],[13,"Right","","",3,null],[8,"Builder","","",null,null],[10,"build","","",4,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"build","","",0,null],[11,"clone","","",5,null],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_record","","",5,null],[11,"build","","",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"field_range","","",1,null],[11,"len","","",1,null],[11,"build","","",1,null],[11,"clone","","",6,null],[11,"new","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_field","","",6,null],[11,"with_line_ending","","",6,null],[11,"build","","",6,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"build","","",2,null],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_number","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_empty_number","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_string","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_empty_string","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_filler","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_length","","",7,null],[11,"with_padding_direction","","",7,null],[11,"with_padding","","",7,null],[11,"with_default","","",7,null],[11,"make_filler","","",7,null],[11,"build","","",7,null],[0,"record","rust_fixed_width","",null,null],[4,"Error","rust_fixed_width::record","",null,null],[13,"RecordSpecNameRequired","","",8,null],[13,"RecordSpecRecognizerError","","",8,null],[13,"RecordSpecNotFound","","",8,null],[13,"FieldSpecNotFound","","",8,null],[13,"PadderFailure","","",8,null],[13,"IoError","","",8,null],[13,"StringDoesNotMatchLineEnding","","",8,null],[13,"PaddedValueWrongLength","","",8,null],[13,"FieldValueRequired","","",8,null],[0,"reader","","",null,null],[3,"Reader","rust_fixed_width::record::reader","",null,null],[3,"ReaderBuilder","","",null,null],[11,"read_field","","",9,null],[11,"read_record","","",9,null],[11,"new","","",10,{"inputs":[],"output":{"name":"readerbuilder"}}],[11,"with_un_padder","","",10,null],[11,"with_recognizer","","",10,null],[11,"with_specs","","",10,null],[11,"build","","",10,null],[0,"writer","rust_fixed_width::record","",null,null],[3,"Writer","rust_fixed_width::record::writer","",null,null],[3,"WriterBuilder","","",null,null],[11,"write_field","","",11,null],[11,"write_record","","",11,null],[11,"new","","",12,{"inputs":[],"output":{"name":"writerbuilder"}}],[11,"with_padder","","",12,null],[11,"with_recognizer","","",12,null],[11,"with_specs","","",12,null],[11,"build","","",12,null],[0,"recognizers","rust_fixed_width::record","",null,null],[3,"LineBuffer","rust_fixed_width::record::recognizers","",null,null],[3,"IdFieldRecognizer","","",null,null],[3,"NoneRecognizer","","",null,null],[4,"Error","","",null,null],[13,"CouldNotRecognize","","",13,null],[13,"Other","","",13,null],[12,"repr","rust_fixed_width::record::recognizers::Error","",13,null],[8,"LineRecordSpecRecognizer","rust_fixed_width::record::recognizers","",null,null],[10,"recognize_for_line","","",14,null],[8,"DataRecordSpecRecognizer","","",null,null],[10,"recognize_for_data","","",15,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"new","","",13,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"downcast","","",13,null],[11,"downcast_ref","","",13,null],[11,"description","","",13,null],[11,"cause","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"new","","",16,{"inputs":[{"name":"t"},{"name":"string"}],"output":{"name":"self"}}],[11,"fill_to","","",16,null],[11,"into_inner","","",16,null],[11,"get_line","","",16,null],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_field","","",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"recognize_for_line","","",17,null],[11,"recognize_for_data","","",17,null],[11,"recognize_for_line","","",18,null],[11,"recognize_for_data","","",18,null],[11,"fmt","rust_fixed_width::record","",8,null],[11,"description","","",8,null],[11,"cause","","",8,null],[11,"fmt","","",8,null],[11,"from","","",8,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"recognizererror"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"paddererror"}],"output":{"name":"self"}}],[0,"padders","rust_fixed_width","",null,null],[3,"Error","rust_fixed_width::padders","",null,null],[3,"DefaultPadder","","",null,null],[3,"IdentityPadder","","",null,null],[4,"PaddingError","","",null,null],[13,"PaddingLongerThanOne","","",19,null],[8,"Padder","","",null,null],[10,"pad","","",20,null],[8,"UnPadder","","",null,null],[10,"unpad","","",21,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"new","","",22,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"downcast","","",22,null],[11,"downcast_ref","","",22,null],[11,"description","","",22,null],[11,"cause","","",22,null],[11,"fmt","","",22,null],[11,"fmt","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"description","","",19,null],[11,"fmt","","",19,null],[11,"from","","",22,{"inputs":[{"name":"paddingerror"}],"output":{"name":"self"}}],[11,"pad","","",23,null],[11,"unpad","","",23,null],[11,"pad","","",24,null],[11,"unpad","","",24,null]],"paths":[[3,"Spec"],[3,"RecordSpec"],[3,"FieldSpec"],[4,"PaddingDirection"],[8,"Builder"],[3,"SpecBuilder"],[3,"RecordSpecBuilder"],[3,"FieldSpecBuilder"],[4,"Error"],[3,"Reader"],[3,"ReaderBuilder"],[3,"Writer"],[3,"WriterBuilder"],[4,"Error"],[8,"LineRecordSpecRecognizer"],[8,"DataRecordSpecRecognizer"],[3,"LineBuffer"],[3,"IdFieldRecognizer"],[3,"NoneRecognizer"],[4,"PaddingError"],[8,"Padder"],[8,"UnPadder"],[3,"Error"],[3,"DefaultPadder"],[3,"IdentityPadder"]]};
searchIndex["pad"] = {"doc":"This is a library for padding strings at runtime.","items":[[4,"Alignment","pad","An **alignment** tells the padder where to put the spaces.",null,null],[13,"Left","","Text on the left, spaces on the right.",0,null],[13,"Right","","Text on the right, spaces on the left.",0,null],[13,"Middle","","Text in the middle, spaces around it, but **shifted to the left** if it can&#39;t be exactly central.",0,null],[13,"MiddleRight","","Text in the middle, spaces around it, but **shifted to the right** if it can&#39;t be exactly central.",0,null],[8,"PadStr","","Functions to do with string padding.",null,null],[11,"pad_to_width","","Pad a string to be at least the given width by adding spaces on the\nright.",1,null],[11,"pad_to_width_with_char","","Pad a string to be at least the given width by adding the given\ncharacter on the right.",1,null],[11,"pad_to_width_with_alignment","","Pad a string to be at least the given with by adding spaces around it.",1,null],[11,"with_exact_width","","Pad a string to be *exactly* the given width by either adding spaces\non the right, or by truncating it to that width.",1,null],[10,"pad","","Pad a string to the given width somehow.",1,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[4,"Alignment"],[8,"PadStr"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to\n[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\nrules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,null],[10,"width_cjk","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,null],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string&#39;s displayed width in columns.",1,null],[10,"width_cjk","","Returns the string&#39;s displayed width in columns.",1,null]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
initSearch(searchIndex);
